package com.autogreetings.serviceImpl;

import java.io.InputStream;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.URLDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.autogreetings.authenticate.AuthenticateGreetingEmployee;
import com.autogreetings.dao.GreetingsDao;
import com.autogreetings.daoImpl.GreetingsDaoImpl;
import com.autogreetings.logger.GreetingsLogger;
import com.autogreetings.model.Employee;
import com.autogreetings.service.GreetingsNotifier;

public class NotifyBirthDayGreetings implements GreetingsNotifier {

	GreetingsDao greetingsDao = new GreetingsDaoImpl();

	public void sendMail(String host, String port, String userName, String password) throws AddressException,
			MessagingException {
		GreetingsLogger.getLogger(NotifyBirthDayGreetings.class.getName()).info(
				"Sending Mail for BirthDay Reminder ....");
		Session session = AuthenticateGreetingEmployee.authenticateEmployeeForGreetings(host, port, userName, password);

		InternetAddress[] ccAddressList = getCCAddressList();
		List<Employee> bdayEmployeeList = getEmployeeDetails();

		if (!bdayEmployeeList.isEmpty()) {
			for (Employee employee : bdayEmployeeList) {
				GreetingsLogger.getLogger(NotifyBirthDayGreetings.class.getName()).info(
						"BirthDay greetings has been sent to : " + employee.getName().toUpperCase());
				Message msg = new MimeMessage(session);

				msg.setFrom(new InternetAddress(userName));
				InternetAddress[] toAddress = { new InternetAddress(employee.getEmailID()) };
				msg.setRecipients(Message.RecipientType.TO, toAddress);
				msg.setRecipients(Message.RecipientType.CC, ccAddressList);
				msg.setSubject("Happy BirthDay " + employee.getName() + "!");
				msg.setSentDate(new Date());
				// set plain text message
				msg.setContent(prepareGreetingsBody(employee), "text/html");
				// sends the e-mail
				Transport.send(msg);
			}
		}
		GreetingsLogger.getLogger(NotifyBirthDayGreetings.class.getName()).info(
				"Auto Greeting has been sent sucessfully ....");

	}

	/**
	 * @return
	 * @throws AddressException
	 */
	private InternetAddress[] getCCAddressList() throws AddressException {
		Properties p = new Properties();
		InputStream input;
		String ccAddress[] = null;
		try {
			input = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(("com/autogreetings/birthday/bdayTemplate.properties"));
			p.load(input);
			ccAddress = p.getProperty("cc_mail_ids").replaceAll("\"", "").split(",");
		} catch (Exception e) {
			GreetingsLogger.getLogger(NotifyWorkAnniversaryGreetings.class.getName()).error(
					"mail id not found ..." + e.getMessage());
		}
		InternetAddress[] ccAddressList = new InternetAddress[ccAddress.length];
		for (int i = 0; i < ccAddress.length; i++) {
			ccAddressList[i] = new InternetAddress(ccAddress[i].toString().replaceAll("\"", ""));
		}
		return ccAddressList;
	}

	private MimeMultipart prepareGreetingsBody(Employee employee) throws MessagingException {
		MimeMultipart multipart = new MimeMultipart("related");

		BodyPart messageBodyPart = new MimeBodyPart();
		String htmlText = "<body style='background-color:#ffff80;'>" + "<center><h2 style='color:#DB9600;'>"
				+ prepareTextTemplate(employee) + "</h2>"
				+ "<br><img src=\"cid:image\" height='100%' width='100%'></center>";
		messageBodyPart.setContent(htmlText, "text/html");
		multipart.addBodyPart(messageBodyPart);

		Random rand = new Random();
		int max = 4;
		int min = 1;
		int randomNum = rand.nextInt((max - min) + 1) + min;

		messageBodyPart = new MimeBodyPart();
		DataSource fds = new URLDataSource(Thread.currentThread().getContextClassLoader()
				.getResource("com/autogreetings/birthday/template/bday" + randomNum + ".jpg"));
		messageBodyPart.setDataHandler(new DataHandler(fds));
		messageBodyPart.setHeader("Content-ID", "<image>");
		multipart.addBodyPart(messageBodyPart);

		return multipart;
	}

	public List<Employee> getEmployeeDetails() {
		List<Employee> employeeList = new ArrayList<Employee>();
		try {
			employeeList = greetingsDao.getListOfBdayEmployee();
		} catch (SQLException e) {
			GreetingsLogger.getLogger(NotifyBirthDayGreetings.class.getName()).error(
					"No details found for Employee ..." + e.getMessage());
		}

		return employeeList;

	}

	private String prepareTextTemplate(Employee employee) {
		Properties p = new Properties();
		InputStream input;
		String templateText = null;
		try {
			input = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(("com/autogreetings/birthday/bdayTemplate.properties"));
			p.load(input);
			templateText = MessageFormat.format(p.getProperty("template1").replaceAll("\"", ""), employee.getName());
		} catch (Exception e) {
			GreetingsLogger.getLogger(NotifyWorkAnniversaryGreetings.class.getName()).error(
					"template not found ..." + e.getMessage());
			System.out.println(e.getMessage());
		}

		return templateText;
	}

}
